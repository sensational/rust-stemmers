//! Generated by Snowball 2.2.0 - https://snowballstem.org/

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use snowball::SnowballEnv;
use snowball::Among;

static A_0: &'static [Among<Context>; 10] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B99}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9E}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BA8}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BAE}", -1, -1, None),
    Among("\u{0BAF}", -1, -1, None),
    Among("\u{0BB5}", -1, -1, None),
];

static A_1: &'static [Among<Context>; 3] = &[
    Among("\u{0BA8}\u{0BCD}\u{0BA4}\u{0BCD}", -1, -1, None),
    Among("\u{0BA8}\u{0BCD}", -1, -1, None),
    Among("\u{0BA8}\u{0BCD}\u{0BA4}", -1, -1, None),
];

static A_2: &'static [Among<Context>; 3] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_3: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9F}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BB1}", -1, -1, None),
];

static A_4: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9F}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BB1}", -1, -1, None),
];

static A_5: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9F}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BB1}", -1, -1, None),
];

static A_6: &'static [Among<Context>; 6] = &[
    Among("\u{0BAF}", -1, -1, None),
    Among("\u{0BB0}", -1, -1, None),
    Among("\u{0BB2}", -1, -1, None),
    Among("\u{0BB3}", -1, -1, None),
    Among("\u{0BB4}", -1, -1, None),
    Among("\u{0BB5}", -1, -1, None),
];

static A_7: &'static [Among<Context>; 6] = &[
    Among("\u{0B99}", -1, -1, None),
    Among("\u{0B9E}", -1, -1, None),
    Among("\u{0BA3}", -1, -1, None),
    Among("\u{0BA8}", -1, -1, None),
    Among("\u{0BA9}", -1, -1, None),
    Among("\u{0BAE}", -1, -1, None),
];

static A_8: &'static [Among<Context>; 3] = &[
    Among("\u{0BB5}\u{0BCD}", -1, -1, None),
    Among("\u{0BAF}", -1, -1, None),
    Among("\u{0BB5}", -1, -1, None),
];

static A_9: &'static [Among<Context>; 8] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC1}", -1, -1, None),
    Among("\u{0BC2}", -1, -1, None),
    Among("\u{0BC6}", -1, -1, None),
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_10: &'static [Among<Context>; 8] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC1}", -1, -1, None),
    Among("\u{0BC2}", -1, -1, None),
    Among("\u{0BC6}", -1, -1, None),
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_11: &'static [Among<Context>; 3] = &[
    Among("\u{0B85}", -1, -1, None),
    Among("\u{0B87}", -1, -1, None),
    Among("\u{0B89}", -1, -1, None),
];

static A_12: &'static [Among<Context>; 10] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B99}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9E}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BA8}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BAE}", -1, -1, None),
    Among("\u{0BAF}", -1, -1, None),
    Among("\u{0BB5}", -1, -1, None),
];

static A_13: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9F}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BB1}", -1, -1, None),
];

static A_14: &'static [Among<Context>; 3] = &[
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BCB}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
];

static A_15: &'static [Among<Context>; 2] = &[
    Among("\u{0BAA}\u{0BBF}", -1, -1, None),
    Among("\u{0BB5}\u{0BBF}", -1, -1, None),
];

static A_16: &'static [Among<Context>; 8] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC1}", -1, -1, None),
    Among("\u{0BC2}", -1, -1, None),
    Among("\u{0BC6}", -1, -1, None),
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_17: &'static [Among<Context>; 13] = &[
    Among("\u{0BAA}\u{0B9F}\u{0BCD}\u{0B9F}\u{0BC1}", -1, -1, None),
    Among("\u{0BB5}\u{0BBF}\u{0B9F}\u{0BCD}\u{0B9F}\u{0BC1}", -1, -1, None),
    Among("\u{0BAA}\u{0B9F}\u{0BC1}", -1, -1, None),
    Among("\u{0BB5}\u{0BBF}\u{0B9F}\u{0BC1}", -1, -1, None),
    Among("\u{0BAA}\u{0B9F}\u{0BCD}\u{0B9F}\u{0BA4}\u{0BC1}", -1, -1, None),
    Among("\u{0BC6}\u{0BB2}\u{0BCD}\u{0BB2}\u{0BBE}\u{0BAE}\u{0BCD}", -1, -1, None),
    Among("\u{0BAA}\u{0B9F}\u{0BCD}\u{0B9F}", -1, -1, None),
    Among("\u{0BAA}\u{0B9F}\u{0BCD}\u{0B9F}\u{0BA3}", -1, -1, None),
    Among("\u{0BA4}\u{0BBE}\u{0BA9}", -1, -1, None),
    Among("\u{0BAA}\u{0B9F}\u{0BBF}\u{0BA4}\u{0BBE}\u{0BA9}", 8, -1, None),
    Among("\u{0B95}\u{0BC1}\u{0BB0}\u{0BBF}\u{0BAF}", -1, -1, None),
    Among("\u{0BAA}\u{0B9F}\u{0BBF}", -1, -1, None),
    Among("\u{0BAA}\u{0BB1}\u{0BCD}\u{0BB1}\u{0BBF}", -1, -1, None),
];

static A_18: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9F}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BB1}", -1, -1, None),
];

static A_19: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}", -1, -1, None),
    Among("\u{0B9A}", -1, -1, None),
    Among("\u{0B9F}", -1, -1, None),
    Among("\u{0BA4}", -1, -1, None),
    Among("\u{0BAA}", -1, -1, None),
    Among("\u{0BB1}", -1, -1, None),
];

static A_20: &'static [Among<Context>; 8] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC1}", -1, -1, None),
    Among("\u{0BC2}", -1, -1, None),
    Among("\u{0BC6}", -1, -1, None),
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_21: &'static [Among<Context>; 8] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC1}", -1, -1, None),
    Among("\u{0BC2}", -1, -1, None),
    Among("\u{0BC6}", -1, -1, None),
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_22: &'static [Among<Context>; 2] = &[
    Among("\u{0BAA}\u{0B9F}\u{0BC1}", -1, -1, None),
    Among("\u{0B95}\u{0BCA}\u{0BA3}\u{0BCD}\u{0B9F}\u{0BBF}\u{0BB0}\u{0BCD}", -1, -1, None),
];

static A_23: &'static [Among<Context>; 12] = &[
    Among("\u{0B85}", -1, -1, None),
    Among("\u{0B86}", -1, -1, None),
    Among("\u{0B87}", -1, -1, None),
    Among("\u{0B88}", -1, -1, None),
    Among("\u{0B89}", -1, -1, None),
    Among("\u{0B8A}", -1, -1, None),
    Among("\u{0B8E}", -1, -1, None),
    Among("\u{0B8F}", -1, -1, None),
    Among("\u{0B90}", -1, -1, None),
    Among("\u{0B92}", -1, -1, None),
    Among("\u{0B93}", -1, -1, None),
    Among("\u{0B94}", -1, -1, None),
];

static A_24: &'static [Among<Context>; 8] = &[
    Among("\u{0BC0}", -1, -1, None),
    Among("\u{0BC1}", -1, -1, None),
    Among("\u{0BC2}", -1, -1, None),
    Among("\u{0BC6}", -1, -1, None),
    Among("\u{0BC7}", -1, -1, None),
    Among("\u{0BC8}", -1, -1, None),
    Among("\u{0BBE}", -1, -1, None),
    Among("\u{0BBF}", -1, -1, None),
];

static A_25: &'static [Among<Context>; 6] = &[
    Among("\u{0B95}\u{0BBF}\u{0BA9}\u{0BCD}\u{0BB1}\u{0BCD}", -1, -1, None),
    Among("\u{0BBE}\u{0BA8}\u{0BBF}\u{0BA9}\u{0BCD}\u{0BB1}\u{0BCD}", -1, -1, None),
    Among("\u{0B95}\u{0BBF}\u{0BB1}\u{0BCD}", -1, -1, None),
    Among("\u{0B95}\u{0BBF}\u{0BA9}\u{0BCD}\u{0BB1}", -1, -1, None),
    Among("\u{0BBE}\u{0BA8}\u{0BBF}\u{0BA9}\u{0BCD}\u{0BB1}", -1, -1, None),
    Among("\u{0B95}\u{0BBF}\u{0BB1}", -1, -1, None),
];

#[derive(Clone)]
struct Context {
    i_length: i32,
    b_found_wrong_ending: bool,
    b_found_vetrumai_urupu: bool,
    b_found_a_match: bool,
}

fn r_has_min_length(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.i_length = (env.current.chars().count() as i32);
    if context.i_length <= 4{
        return false;
    }
    return true
}

fn r_fix_va_start(env: &mut SnowballEnv, context: &mut Context) -> bool {
    'lab0: loop {
        let v_1 = env.cursor;
        'lab1: loop {
            let v_2 = env.cursor;
            let v_3 = env.cursor;
            'lab2: loop {
                if !env.eq_s(&"\u{0BB5}\u{0BCB}") {
                    env.cursor = v_3;
                    break 'lab2;
                }
                break 'lab2;
            }
            env.cursor = v_2;
            env.bra = env.cursor;
            if !env.eq_s(&"\u{0BB5}\u{0BCB}") {
                break 'lab1;
            }
            env.ket = env.cursor;
            if !env.slice_from("\u{0B93}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = v_1;
        'lab3: loop {
            let v_4 = env.cursor;
            let v_5 = env.cursor;
            'lab4: loop {
                if !env.eq_s(&"\u{0BB5}\u{0BCA}") {
                    env.cursor = v_5;
                    break 'lab4;
                }
                break 'lab4;
            }
            env.cursor = v_4;
            env.bra = env.cursor;
            if !env.eq_s(&"\u{0BB5}\u{0BCA}") {
                break 'lab3;
            }
            env.ket = env.cursor;
            if !env.slice_from("\u{0B92}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = v_1;
        'lab5: loop {
            let v_6 = env.cursor;
            let v_7 = env.cursor;
            'lab6: loop {
                if !env.eq_s(&"\u{0BB5}\u{0BC1}") {
                    env.cursor = v_7;
                    break 'lab6;
                }
                break 'lab6;
            }
            env.cursor = v_6;
            env.bra = env.cursor;
            if !env.eq_s(&"\u{0BB5}\u{0BC1}") {
                break 'lab5;
            }
            env.ket = env.cursor;
            if !env.slice_from("\u{0B89}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = v_1;
        let v_8 = env.cursor;
        let v_9 = env.cursor;
        'lab7: loop {
            if !env.eq_s(&"\u{0BB5}\u{0BC2}") {
                env.cursor = v_9;
                break 'lab7;
            }
            break 'lab7;
        }
        env.cursor = v_8;
        env.bra = env.cursor;
        if !env.eq_s(&"\u{0BB5}\u{0BC2}") {
            return false;
        }
        env.ket = env.cursor;
        if !env.slice_from("\u{0B8A}") {
            return false;
        }
        break 'lab0;
    }
    return true
}

fn r_fix_endings(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_wrong_ending = true;
    'replab0: loop{
        let v_1 = env.cursor;
        'lab1: for _ in 0..1 {
            if !context.b_found_wrong_ending {
                break 'lab1;
            }
            let v_2 = env.cursor;
            r_fix_ending(env, context);
            env.cursor = v_2;
            continue 'replab0;
        }
        env.cursor = v_1;
        break 'replab0;
    }
    return true
}

fn r_remove_question_prefixes(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.bra = env.cursor;
    if !env.eq_s(&"\u{0B8E}") {
        return false;
    }
    if env.find_among(A_0, context) == 0 {
        return false;
    }
    if !env.eq_s(&"\u{0BCD}") {
        return false;
    }
    env.ket = env.cursor;
    if !env.slice_del() {
        return false;
    }
    let v_1 = env.cursor;
    r_fix_va_start(env, context);
    env.cursor = v_1;
    return true
}

fn r_fix_ending(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_wrong_ending = false;
    context.i_length = (env.current.chars().count() as i32);
    if context.i_length <= 3{
        return false;
    }
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            if env.find_among_b(A_1, context) == 0 {
                break 'lab1;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab2: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BAF}\u{0BCD}") {
                break 'lab2;
            }
            let v_2 = env.limit - env.cursor;
            if env.find_among_b(A_2, context) == 0 {
                break 'lab2;
            }
            env.cursor = env.limit - v_2;
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab3: loop {
            env.ket = env.cursor;
            'lab4: loop {
                let v_3 = env.limit - env.cursor;
                'lab5: loop {
                    if !env.eq_s_b(&"\u{0B9F}\u{0BCD}\u{0BAA}\u{0BCD}") {
                        break 'lab5;
                    }
                    break 'lab4;
                }
                env.cursor = env.limit - v_3;
                if !env.eq_s_b(&"\u{0B9F}\u{0BCD}\u{0B95}\u{0BCD}") {
                    break 'lab3;
                }
                break 'lab4;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BB3}\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab6: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BA9}\u{0BCD}\u{0BB1}\u{0BCD}") {
                break 'lab6;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BB2}\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab7: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BB1}\u{0BCD}\u{0B95}\u{0BCD}") {
                break 'lab7;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BB2}\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab8: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0B9F}\u{0BCD}\u{0B9F}\u{0BCD}") {
                break 'lab8;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0B9F}\u{0BC1}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab9: loop {
            if !context.b_found_vetrumai_urupu {
                break 'lab9;
            }
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BA4}\u{0BCD}\u{0BA4}\u{0BCD}") {
                break 'lab9;
            }
            let v_4 = env.limit - env.cursor;
            let v_5 = env.limit - env.cursor;
            'lab10: loop {
                if !env.eq_s_b(&"\u{0BC8}") {
                    break 'lab10;
                }
                break 'lab9;
            }
            env.cursor = env.limit - v_5;
            env.cursor = env.limit - v_4;
            env.bra = env.cursor;
            if !env.slice_from("\u{0BAE}\u{0BCD}") {
                return false;
            }
            env.bra = env.cursor;
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab11: loop {
            env.ket = env.cursor;
            'lab12: loop {
                let v_6 = env.limit - env.cursor;
                'lab13: loop {
                    if !env.eq_s_b(&"\u{0BC1}\u{0B95}\u{0BCD}") {
                        break 'lab13;
                    }
                    break 'lab12;
                }
                env.cursor = env.limit - v_6;
                if !env.eq_s_b(&"\u{0BC1}\u{0B95}\u{0BCD}\u{0B95}\u{0BCD}") {
                    break 'lab11;
                }
                break 'lab12;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab14: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BCD}") {
                break 'lab14;
            }
            if env.find_among_b(A_3, context) == 0 {
                break 'lab14;
            }
            if !env.eq_s_b(&"\u{0BCD}") {
                break 'lab14;
            }
            if env.find_among_b(A_4, context) == 0 {
                break 'lab14;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab15: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BC1}\u{0B95}\u{0BCD}") {
                break 'lab15;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab16: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BCD}") {
                break 'lab16;
            }
            if env.find_among_b(A_5, context) == 0 {
                break 'lab16;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab17: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BCD}") {
                break 'lab17;
            }
            'lab18: loop {
                let v_7 = env.limit - env.cursor;
                'lab19: loop {
                    if env.find_among_b(A_6, context) == 0 {
                        break 'lab19;
                    }
                    break 'lab18;
                }
                env.cursor = env.limit - v_7;
                if env.find_among_b(A_7, context) == 0 {
                    break 'lab17;
                }
                break 'lab18;
            }
            if !env.eq_s_b(&"\u{0BCD}") {
                break 'lab17;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab20: loop {
            env.ket = env.cursor;
            if env.find_among_b(A_8, context) == 0 {
                break 'lab20;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab21: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BA9}\u{0BC1}") {
                break 'lab21;
            }
            let v_8 = env.limit - env.cursor;
            let v_9 = env.limit - env.cursor;
            'lab22: loop {
                if env.find_among_b(A_9, context) == 0 {
                    break 'lab22;
                }
                break 'lab21;
            }
            env.cursor = env.limit - v_9;
            env.cursor = env.limit - v_8;
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab23: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0B99}\u{0BCD}") {
                break 'lab23;
            }
            let v_10 = env.limit - env.cursor;
            let v_11 = env.limit - env.cursor;
            'lab24: loop {
                if !env.eq_s_b(&"\u{0BC8}") {
                    break 'lab24;
                }
                break 'lab23;
            }
            env.cursor = env.limit - v_11;
            env.cursor = env.limit - v_10;
            env.bra = env.cursor;
            if !env.slice_from("\u{0BAE}\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab25: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0B99}\u{0BCD}") {
                break 'lab25;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{0BCD}") {
            return false;
        }
        let v_12 = env.limit - env.cursor;
        'lab26: loop {
            let v_13 = env.limit - env.cursor;
            'lab27: loop {
                if env.find_among_b(A_10, context) == 0 {
                    break 'lab27;
                }
                break 'lab26;
            }
            env.cursor = env.limit - v_13;
            if !env.eq_s_b(&"\u{0BCD}") {
                return false;
            }
            break 'lab26;
        }
        env.cursor = env.limit - v_12;
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        break 'lab0;
    }
    env.cursor = env.limit_backward;
    context.b_found_wrong_ending = true;
    return true
}

fn r_remove_pronoun_prefixes(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = false;
    env.bra = env.cursor;
    if env.find_among(A_11, context) == 0 {
        return false;
    }
    if env.find_among(A_12, context) == 0 {
        return false;
    }
    if !env.eq_s(&"\u{0BCD}") {
        return false;
    }
    env.ket = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_found_a_match = true;
    let v_1 = env.cursor;
    r_fix_va_start(env, context);
    env.cursor = v_1;
    return true
}

fn r_remove_plural_suffix(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = false;
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BC1}\u{0B99}\u{0BCD}\u{0B95}\u{0BB3}\u{0BCD}") {
                break 'lab1;
            }
            let v_2 = env.limit - env.cursor;
            let v_3 = env.limit - env.cursor;
            'lab2: loop {
                if env.find_among_b(A_13, context) == 0 {
                    break 'lab2;
                }
                break 'lab1;
            }
            env.cursor = env.limit - v_3;
            env.cursor = env.limit - v_2;
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab3: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BB1}\u{0BCD}\u{0B95}\u{0BB3}\u{0BCD}") {
                break 'lab3;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BB2}\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab4: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0B9F}\u{0BCD}\u{0B95}\u{0BB3}\u{0BCD}") {
                break 'lab4;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BB3}\u{0BCD}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{0B95}\u{0BB3}\u{0BCD}") {
            return false;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        break 'lab0;
    }
    context.b_found_a_match = true;
    env.cursor = env.limit_backward;
    return true
}

fn r_remove_question_suffixes(env: &mut SnowballEnv, context: &mut Context) -> bool {
    if !r_has_min_length(env, context) {
        return false;
    }
    context.b_found_a_match = false;
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if env.find_among_b(A_14, context) == 0 {
            break 'lab0;
        }
        env.bra = env.cursor;
        if !env.slice_from("\u{0BCD}") {
            return false;
        }
        context.b_found_a_match = true;
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    env.cursor = env.limit_backward;
    let v_2 = env.cursor;
    r_fix_endings(env, context);
    env.cursor = v_2;
    return true
}

fn r_remove_command_suffixes(env: &mut SnowballEnv, context: &mut Context) -> bool {
    if !r_has_min_length(env, context) {
        return false;
    }
    context.b_found_a_match = false;
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    env.ket = env.cursor;
    if env.find_among_b(A_15, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_found_a_match = true;
    env.cursor = env.limit_backward;
    return true
}

fn r_remove_um(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = false;
    if !r_has_min_length(env, context) {
        return false;
    }
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    env.ket = env.cursor;
    if !env.eq_s_b(&"\u{0BC1}\u{0BAE}\u{0BCD}") {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_from("\u{0BCD}") {
        return false;
    }
    context.b_found_a_match = true;
    env.cursor = env.limit_backward;
    let v_1 = env.cursor;
    r_fix_ending(env, context);
    env.cursor = v_1;
    return true
}

fn r_remove_common_word_endings(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = false;
    if !r_has_min_length(env, context) {
        return false;
    }
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            let v_2 = env.limit - env.cursor;
            env.ket = env.cursor;
            'lab2: loop {
                let v_3 = env.limit - env.cursor;
                'lab3: loop {
                    if !env.eq_s_b(&"\u{0BC1}\u{0B9F}\u{0BA9}\u{0BCD}") {
                        break 'lab3;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab4: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BB2}\u{0BCD}\u{0BB2}\u{0BC8}") {
                        break 'lab4;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab5: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0B9F}\u{0BAE}\u{0BCD}") {
                        break 'lab5;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab6: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BA9}\u{0BCD}\u{0BB1}\u{0BBF}") {
                        break 'lab6;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab7: loop {
                    if !env.eq_s_b(&"\u{0BBE}\u{0B95}\u{0BBF}") {
                        break 'lab7;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab8: loop {
                    if !env.eq_s_b(&"\u{0BBE}\u{0B95}\u{0BBF}\u{0BAF}") {
                        break 'lab8;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab9: loop {
                    if !env.eq_s_b(&"\u{0BC6}\u{0BA9}\u{0BCD}\u{0BB1}\u{0BC1}") {
                        break 'lab9;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab10: loop {
                    if !env.eq_s_b(&"\u{0BC1}\u{0BB3}\u{0BCD}\u{0BB3}") {
                        break 'lab10;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab11: loop {
                    if !env.eq_s_b(&"\u{0BC1}\u{0B9F}\u{0BC8}\u{0BAF}") {
                        break 'lab11;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab12: loop {
                    if !env.eq_s_b(&"\u{0BC1}\u{0B9F}\u{0BC8}") {
                        break 'lab12;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab13: loop {
                    if !env.eq_s_b(&"\u{0BC6}\u{0BA9}\u{0BC1}\u{0BAE}\u{0BCD}") {
                        break 'lab13;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab14: loop {
                    if !env.eq_s_b(&"\u{0BB2}\u{0BCD}\u{0BB2}") {
                        break 'lab14;
                    }
                    let v_4 = env.limit - env.cursor;
                    let v_5 = env.limit - env.cursor;
                    'lab15: loop {
                        if env.find_among_b(A_16, context) == 0 {
                            break 'lab15;
                        }
                        break 'lab14;
                    }
                    env.cursor = env.limit - v_5;
                    env.cursor = env.limit - v_4;
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                'lab16: loop {
                    if !env.eq_s_b(&"\u{0BC6}\u{0BA9}") {
                        break 'lab16;
                    }
                    break 'lab2;
                }
                env.cursor = env.limit - v_3;
                if !env.eq_s_b(&"\u{0BBE}\u{0B95}\u{0BBF}") {
                    break 'lab1;
                }
                break 'lab2;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            context.b_found_a_match = true;
            env.cursor = env.limit - v_2;
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        let v_6 = env.limit - env.cursor;
        env.ket = env.cursor;
        if env.find_among_b(A_17, context) == 0 {
            return false;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_found_a_match = true;
        env.cursor = env.limit - v_6;
        break 'lab0;
    }
    env.cursor = env.limit_backward;
    let v_7 = env.cursor;
    r_fix_endings(env, context);
    env.cursor = v_7;
    return true
}

fn r_remove_vetrumai_urupukal(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = false;
    context.b_found_vetrumai_urupu = false;
    if !r_has_min_length(env, context) {
        return false;
    }
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            let v_2 = env.limit - env.cursor;
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{0BA9}\u{0BC8}") {
                break 'lab1;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            env.cursor = env.limit - v_2;
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab2: loop {
            let v_3 = env.limit - env.cursor;
            env.ket = env.cursor;
            'lab3: loop {
                let v_4 = env.limit - env.cursor;
                'lab4: loop {
                    'lab5: loop {
                        let v_5 = env.limit - env.cursor;
                        'lab6: loop {
                            if !env.eq_s_b(&"\u{0BBF}\u{0BA9}\u{0BC8}") {
                                break 'lab6;
                            }
                            break 'lab5;
                        }
                        env.cursor = env.limit - v_5;
                        if !env.eq_s_b(&"\u{0BC8}") {
                            break 'lab4;
                        }
                        break 'lab5;
                    }
                    let v_6 = env.limit - env.cursor;
                    let v_7 = env.limit - env.cursor;
                    'lab7: loop {
                        if env.find_among_b(A_18, context) == 0 {
                            break 'lab7;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_7;
                    env.cursor = env.limit - v_6;
                    break 'lab3;
                }
                env.cursor = env.limit - v_4;
                if !env.eq_s_b(&"\u{0BC8}") {
                    break 'lab2;
                }
                let v_8 = env.limit - env.cursor;
                if env.find_among_b(A_19, context) == 0 {
                    break 'lab2;
                }
                if !env.eq_s_b(&"\u{0BCD}") {
                    break 'lab2;
                }
                env.cursor = env.limit - v_8;
                break 'lab3;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            env.cursor = env.limit - v_3;
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab8: loop {
            let v_9 = env.limit - env.cursor;
            env.ket = env.cursor;
            'lab9: loop {
                let v_10 = env.limit - env.cursor;
                'lab10: loop {
                    if !env.eq_s_b(&"\u{0BCA}\u{0B9F}\u{0BC1}") {
                        break 'lab10;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab11: loop {
                    if !env.eq_s_b(&"\u{0BCB}\u{0B9F}\u{0BC1}") {
                        break 'lab11;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab12: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BB2}\u{0BCD}") {
                        break 'lab12;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab13: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BB1}\u{0BCD}") {
                        break 'lab13;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab14: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BA9}\u{0BCD}") {
                        break 'lab14;
                    }
                    let v_11 = env.limit - env.cursor;
                    let v_12 = env.limit - env.cursor;
                    'lab15: loop {
                        if !env.eq_s_b(&"\u{0BAE}") {
                            break 'lab15;
                        }
                        break 'lab14;
                    }
                    env.cursor = env.limit - v_12;
                    env.cursor = env.limit - v_11;
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab16: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BA9}\u{0BCD}\u{0BB1}\u{0BC1}") {
                        break 'lab16;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab17: loop {
                    if !env.eq_s_b(&"\u{0BBF}\u{0BB0}\u{0BC1}\u{0BA8}\u{0BCD}\u{0BA4}\u{0BC1}") {
                        break 'lab17;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab18: loop {
                    if !env.eq_s_b(&"\u{0BB5}\u{0BBF}\u{0B9F}") {
                        break 'lab18;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab19: loop {
                    if context.i_length < 7{
                        break 'lab19;
                    }
                    if !env.eq_s_b(&"\u{0BBF}\u{0B9F}\u{0BAE}\u{0BCD}") {
                        break 'lab19;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab20: loop {
                    if !env.eq_s_b(&"\u{0BBE}\u{0BB2}\u{0BCD}") {
                        break 'lab20;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab21: loop {
                    if !env.eq_s_b(&"\u{0BC1}\u{0B9F}\u{0BC8}") {
                        break 'lab21;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab22: loop {
                    if !env.eq_s_b(&"\u{0BBE}\u{0BAE}\u{0BB2}\u{0BCD}") {
                        break 'lab22;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab23: loop {
                    if !env.eq_s_b(&"\u{0BB2}\u{0BCD}") {
                        break 'lab23;
                    }
                    let v_13 = env.limit - env.cursor;
                    let v_14 = env.limit - env.cursor;
                    'lab24: loop {
                        if env.find_among_b(A_20, context) == 0 {
                            break 'lab24;
                        }
                        break 'lab23;
                    }
                    env.cursor = env.limit - v_14;
                    env.cursor = env.limit - v_13;
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                if !env.eq_s_b(&"\u{0BC1}\u{0BB3}\u{0BCD}") {
                    break 'lab8;
                }
                break 'lab9;
            }
            env.bra = env.cursor;
            if !env.slice_from("\u{0BCD}") {
                return false;
            }
            env.cursor = env.limit - v_9;
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab25: loop {
            let v_15 = env.limit - env.cursor;
            env.ket = env.cursor;
            'lab26: loop {
                let v_16 = env.limit - env.cursor;
                'lab27: loop {
                    if !env.eq_s_b(&"\u{0B95}\u{0BA3}\u{0BCD}") {
                        break 'lab27;
                    }
                    break 'lab26;
                }
                env.cursor = env.limit - v_16;
                'lab28: loop {
                    if !env.eq_s_b(&"\u{0BAE}\u{0BC1}\u{0BA9}\u{0BCD}") {
                        break 'lab28;
                    }
                    break 'lab26;
                }
                env.cursor = env.limit - v_16;
                'lab29: loop {
                    if !env.eq_s_b(&"\u{0BAE}\u{0BC7}\u{0BB2}\u{0BCD}") {
                        break 'lab29;
                    }
                    break 'lab26;
                }
                env.cursor = env.limit - v_16;
                'lab30: loop {
                    if !env.eq_s_b(&"\u{0BAE}\u{0BC7}\u{0BB1}\u{0BCD}") {
                        break 'lab30;
                    }
                    break 'lab26;
                }
                env.cursor = env.limit - v_16;
                'lab31: loop {
                    if !env.eq_s_b(&"\u{0B95}\u{0BC0}\u{0BB4}\u{0BCD}") {
                        break 'lab31;
                    }
                    break 'lab26;
                }
                env.cursor = env.limit - v_16;
                'lab32: loop {
                    if !env.eq_s_b(&"\u{0BAA}\u{0BBF}\u{0BA9}\u{0BCD}") {
                        break 'lab32;
                    }
                    break 'lab26;
                }
                env.cursor = env.limit - v_16;
                if !env.eq_s_b(&"\u{0BA4}\u{0BC1}") {
                    break 'lab25;
                }
                let v_17 = env.limit - env.cursor;
                let v_18 = env.limit - env.cursor;
                'lab33: loop {
                    if env.find_among_b(A_21, context) == 0 {
                        break 'lab33;
                    }
                    break 'lab25;
                }
                env.cursor = env.limit - v_18;
                env.cursor = env.limit - v_17;
                break 'lab26;
            }
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            env.cursor = env.limit - v_15;
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        let v_19 = env.limit - env.cursor;
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{0BC0}") {
            return false;
        }
        env.bra = env.cursor;
        if !env.slice_from("\u{0BBF}") {
            return false;
        }
        env.cursor = env.limit - v_19;
        break 'lab0;
    }
    context.b_found_a_match = true;
    context.b_found_vetrumai_urupu = true;
    let v_20 = env.limit - env.cursor;
    'lab34: loop {
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{0BBF}\u{0BA9}\u{0BCD}") {
            break 'lab34;
        }
        env.bra = env.cursor;
        if !env.slice_from("\u{0BCD}") {
            return false;
        }
        break 'lab34;
    }
    env.cursor = env.limit - v_20;
    env.cursor = env.limit_backward;
    let v_21 = env.cursor;
    r_fix_endings(env, context);
    env.cursor = v_21;
    return true
}

fn r_remove_tense_suffixes(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = true;
    'replab0: loop{
        let v_1 = env.cursor;
        'lab1: for _ in 0..1 {
            if !context.b_found_a_match {
                break 'lab1;
            }
            let v_2 = env.cursor;
            r_remove_tense_suffix(env, context);
            env.cursor = v_2;
            continue 'replab0;
        }
        env.cursor = v_1;
        break 'replab0;
    }
    return true
}

fn r_remove_tense_suffix(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.b_found_a_match = false;
    if !r_has_min_length(env, context) {
        return false;
    }
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        'lab1: loop {
            let v_2 = env.limit - env.cursor;
            'lab2: loop {
                let v_3 = env.limit - env.cursor;
                env.ket = env.cursor;
                if env.find_among_b(A_22, context) == 0 {
                    break 'lab2;
                }
                env.bra = env.cursor;
                if !env.slice_del() {
                    return false;
                }
                context.b_found_a_match = true;
                env.cursor = env.limit - v_3;
                break 'lab1;
            }
            env.cursor = env.limit - v_2;
            'lab3: loop {
                let v_4 = env.limit - env.cursor;
                env.ket = env.cursor;
                'lab4: loop {
                    let v_5 = env.limit - env.cursor;
                    'lab5: loop {
                        if !env.eq_s_b(&"\u{0BAE}\u{0BBE}\u{0BB0}\u{0BCD}") {
                            break 'lab5;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab6: loop {
                        if !env.eq_s_b(&"\u{0BAE}\u{0BBF}\u{0BA9}\u{0BCD}") {
                            break 'lab6;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab7: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BA9}\u{0BCD}") {
                            break 'lab7;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab8: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BBE}\u{0BA9}\u{0BCD}") {
                            break 'lab8;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab9: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BBE}\u{0BB3}\u{0BCD}") {
                            break 'lab9;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab10: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BBE}\u{0BB0}\u{0BCD}") {
                            break 'lab10;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab11: loop {
                        if !env.eq_s_b(&"\u{0BB5}\u{0BA9}\u{0BCD}") {
                            break 'lab11;
                        }
                        let v_6 = env.limit - env.cursor;
                        let v_7 = env.limit - env.cursor;
                        'lab12: loop {
                            if env.find_among_b(A_23, context) == 0 {
                                break 'lab12;
                            }
                            break 'lab11;
                        }
                        env.cursor = env.limit - v_7;
                        env.cursor = env.limit - v_6;
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab13: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BB3}\u{0BCD}") {
                            break 'lab13;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab14: loop {
                        if !env.eq_s_b(&"\u{0BB5}\u{0BB3}\u{0BCD}") {
                            break 'lab14;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab15: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BB0}\u{0BCD}") {
                            break 'lab15;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab16: loop {
                        if !env.eq_s_b(&"\u{0BB5}\u{0BB0}\u{0BCD}") {
                            break 'lab16;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab17: loop {
                        if !env.eq_s_b(&"\u{0BA9}") {
                            break 'lab17;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab18: loop {
                        if !env.eq_s_b(&"\u{0BAA}") {
                            break 'lab18;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab19: loop {
                        if !env.eq_s_b(&"\u{0B95}") {
                            break 'lab19;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab20: loop {
                        if !env.eq_s_b(&"\u{0BA4}") {
                            break 'lab20;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab21: loop {
                        if !env.eq_s_b(&"\u{0BAF}") {
                            break 'lab21;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab22: loop {
                        if !env.eq_s_b(&"\u{0BAA}\u{0BA9}\u{0BCD}") {
                            break 'lab22;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab23: loop {
                        if !env.eq_s_b(&"\u{0BAA}\u{0BB3}\u{0BCD}") {
                            break 'lab23;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab24: loop {
                        if !env.eq_s_b(&"\u{0BAA}\u{0BB0}\u{0BCD}") {
                            break 'lab24;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab25: loop {
                        if !env.eq_s_b(&"\u{0BA4}\u{0BC1}") {
                            break 'lab25;
                        }
                        let v_8 = env.limit - env.cursor;
                        let v_9 = env.limit - env.cursor;
                        'lab26: loop {
                            if env.find_among_b(A_24, context) == 0 {
                                break 'lab26;
                            }
                            break 'lab25;
                        }
                        env.cursor = env.limit - v_9;
                        env.cursor = env.limit - v_8;
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab27: loop {
                        if !env.eq_s_b(&"\u{0BBF}\u{0BB1}\u{0BCD}\u{0BB1}\u{0BC1}") {
                            break 'lab27;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab28: loop {
                        if !env.eq_s_b(&"\u{0BAA}\u{0BAE}\u{0BCD}") {
                            break 'lab28;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab29: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BAE}\u{0BCD}") {
                            break 'lab29;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab30: loop {
                        if !env.eq_s_b(&"\u{0BA4}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab30;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab31: loop {
                        if !env.eq_s_b(&"\u{0BB1}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab31;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab32: loop {
                        if !env.eq_s_b(&"\u{0B95}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab32;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab33: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BC6}\u{0BA9}\u{0BCD}") {
                            break 'lab33;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    'lab34: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BC8}") {
                            break 'lab34;
                        }
                        break 'lab4;
                    }
                    env.cursor = env.limit - v_5;
                    if !env.eq_s_b(&"\u{0BB5}\u{0BC8}") {
                        break 'lab3;
                    }
                    break 'lab4;
                }
                env.bra = env.cursor;
                if !env.slice_del() {
                    return false;
                }
                context.b_found_a_match = true;
                env.cursor = env.limit - v_4;
                break 'lab1;
            }
            env.cursor = env.limit - v_2;
            'lab35: loop {
                let v_10 = env.limit - env.cursor;
                env.ket = env.cursor;
                'lab36: loop {
                    let v_11 = env.limit - env.cursor;
                    'lab37: loop {
                        if !env.eq_s_b(&"\u{0BBE}\u{0BA9}\u{0BCD}") {
                            break 'lab37;
                        }
                        let v_12 = env.limit - env.cursor;
                        let v_13 = env.limit - env.cursor;
                        'lab38: loop {
                            if !env.eq_s_b(&"\u{0B9A}") {
                                break 'lab38;
                            }
                            break 'lab37;
                        }
                        env.cursor = env.limit - v_13;
                        env.cursor = env.limit - v_12;
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab39: loop {
                        if !env.eq_s_b(&"\u{0BBE}\u{0BB3}\u{0BCD}") {
                            break 'lab39;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab40: loop {
                        if !env.eq_s_b(&"\u{0BBE}\u{0BB0}\u{0BCD}") {
                            break 'lab40;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab41: loop {
                        if !env.eq_s_b(&"\u{0BC7}\u{0BA9}\u{0BCD}") {
                            break 'lab41;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab42: loop {
                        if !env.eq_s_b(&"\u{0BBE}") {
                            break 'lab42;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab43: loop {
                        if !env.eq_s_b(&"\u{0BBE}\u{0BAE}\u{0BCD}") {
                            break 'lab43;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab44: loop {
                        if !env.eq_s_b(&"\u{0BC6}\u{0BAE}\u{0BCD}") {
                            break 'lab44;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab45: loop {
                        if !env.eq_s_b(&"\u{0BC7}\u{0BAE}\u{0BCD}") {
                            break 'lab45;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab46: loop {
                        if !env.eq_s_b(&"\u{0BCB}\u{0BAE}\u{0BCD}") {
                            break 'lab46;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab47: loop {
                        if !env.eq_s_b(&"\u{0B95}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab47;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab48: loop {
                        if !env.eq_s_b(&"\u{0BA4}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab48;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab49: loop {
                        if !env.eq_s_b(&"\u{0B9F}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab49;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab50: loop {
                        if !env.eq_s_b(&"\u{0BB1}\u{0BC1}\u{0BAE}\u{0BCD}") {
                            break 'lab50;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab51: loop {
                        if !env.eq_s_b(&"\u{0BBE}\u{0BAF}\u{0BCD}") {
                            break 'lab51;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab52: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BC6}\u{0BA9}\u{0BCD}") {
                            break 'lab52;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab53: loop {
                        if !env.eq_s_b(&"\u{0BA9}\u{0BBF}\u{0BB0}\u{0BCD}") {
                            break 'lab53;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    'lab54: loop {
                        if !env.eq_s_b(&"\u{0BC0}\u{0BB0}\u{0BCD}") {
                            break 'lab54;
                        }
                        break 'lab36;
                    }
                    env.cursor = env.limit - v_11;
                    if !env.eq_s_b(&"\u{0BC0}\u{0BAF}\u{0BB0}\u{0BCD}") {
                        break 'lab35;
                    }
                    break 'lab36;
                }
                env.bra = env.cursor;
                if !env.slice_from("\u{0BCD}") {
                    return false;
                }
                context.b_found_a_match = true;
                env.cursor = env.limit - v_10;
                break 'lab1;
            }
            env.cursor = env.limit - v_2;
            let v_14 = env.limit - env.cursor;
            env.ket = env.cursor;
            'lab55: loop {
                let v_15 = env.limit - env.cursor;
                'lab56: loop {
                    if !env.eq_s_b(&"\u{0B95}\u{0BC1}") {
                        break 'lab56;
                    }
                    break 'lab55;
                }
                env.cursor = env.limit - v_15;
                if !env.eq_s_b(&"\u{0BA4}\u{0BC1}") {
                    break 'lab0;
                }
                break 'lab55;
            }
            let v_16 = env.limit - env.cursor;
            if !env.eq_s_b(&"\u{0BCD}") {
                break 'lab0;
            }
            env.cursor = env.limit - v_16;
            env.bra = env.cursor;
            if !env.slice_del() {
                return false;
            }
            context.b_found_a_match = true;
            env.cursor = env.limit - v_14;
            break 'lab1;
        }
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    let v_17 = env.limit - env.cursor;
    'lab57: loop {
        env.ket = env.cursor;
        if env.find_among_b(A_25, context) == 0 {
            break 'lab57;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_found_a_match = true;
        break 'lab57;
    }
    env.cursor = env.limit - v_17;
    env.cursor = env.limit_backward;
    let v_18 = env.cursor;
    r_fix_endings(env, context);
    env.cursor = v_18;
    return true
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context {
        i_length: 0,
        b_found_wrong_ending: false,
        b_found_vetrumai_urupu: false,
        b_found_a_match: false,
    };
    context.b_found_vetrumai_urupu = false;
    let v_1 = env.cursor;
    r_fix_ending(env, context);
    env.cursor = v_1;
    if !r_has_min_length(env, context) {
        return false;
    }
    let v_2 = env.cursor;
    r_remove_question_prefixes(env, context);
    env.cursor = v_2;
    let v_3 = env.cursor;
    r_remove_pronoun_prefixes(env, context);
    env.cursor = v_3;
    let v_4 = env.cursor;
    r_remove_question_suffixes(env, context);
    env.cursor = v_4;
    let v_5 = env.cursor;
    r_remove_um(env, context);
    env.cursor = v_5;
    let v_6 = env.cursor;
    r_remove_common_word_endings(env, context);
    env.cursor = v_6;
    let v_7 = env.cursor;
    r_remove_vetrumai_urupukal(env, context);
    env.cursor = v_7;
    let v_8 = env.cursor;
    r_remove_plural_suffix(env, context);
    env.cursor = v_8;
    let v_9 = env.cursor;
    r_remove_command_suffixes(env, context);
    env.cursor = v_9;
    let v_10 = env.cursor;
    r_remove_tense_suffixes(env, context);
    env.cursor = v_10;
    return true
}
